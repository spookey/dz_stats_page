from importlib import reload
from os import path

from observatory.start import environment


def test_database(monkeypatch):
    db_path = path.abspath(path.join(
        environment.ROOT_DIR, 'database_dev.sqlite'
    ))
    assert environment.DATABASE == 'sqlite://'
    assert environment.DATABASE_DEV == f'sqlite:///{db_path}'

    monkeypatch.setenv('DATABASE', 'üíæ')
    monkeypatch.setenv('DATABASE_DEV', 'üìº')
    reload(environment)

    assert environment.DATABASE == 'üíæ'
    assert environment.DATABASE_DEV == 'üìº'


def test_loglevel(monkeypatch):
    assert environment.LOG_LVL == 'info'

    monkeypatch.setenv('LOG_LVL', 'üõé')
    reload(environment)

    assert environment.LOG_LVL == 'üõé'


def test_secret(monkeypatch):
    assert environment.SECRET_BASE == environment.ROOT_DIR
    assert environment.SECRET_FILE == 'secret.key'

    monkeypatch.setenv('SECRET_BASE', 'üìå')
    monkeypatch.setenv('SECRET_FILE', '‚úèÔ∏è')
    reload(environment)

    assert environment.SECRET_BASE == 'üìå'
    assert environment.SECRET_FILE == '‚úèÔ∏è'


def test_bcrypt_log_rounds(monkeypatch):
    assert environment.BCRYPT_LOG_ROUNDS == 13

    monkeypatch.setenv('BCRYPT_LOG_ROUNDS', '42')
    reload(environment)

    assert environment.BCRYPT_LOG_ROUNDS == 42


def test_csrf_strict(monkeypatch):
    assert environment.CSRF_STRICT is True

    monkeypatch.setenv('CSRF_STRICT', 'üçâ')
    reload(environment)

    assert environment.CSRF_STRICT is True


def test_backlog_days(monkeypatch):
    assert environment.BACKLOG_DAYS == 14

    monkeypatch.setenv('BACKLOG_DAYS', '1337')
    reload(environment)

    assert environment.BACKLOG_DAYS == 1337


def test_title(monkeypatch):
    assert environment.TITLE == 'Observatory'

    monkeypatch.setenv('TITLE', 'üïπ')
    reload(environment)

    assert environment.TITLE == 'üïπ'


def test_language(monkeypatch):
    assert environment.HTML_LANG == 'en'

    monkeypatch.setenv('HTML_LANG', 'üóª')
    reload(environment)

    assert environment.HTML_LANG == 'üóª'


def test_favicon(monkeypatch):
    assert environment.FAVICON == 'logo.png'

    monkeypatch.setenv('FAVICON', 'üí•')
    reload(environment)

    assert environment.FAVICON == 'üí•'


def test_fmt_fields(monkeypatch):
    assert environment.FMT_STRFTIME == '%d.%m.%Y %H:%M:%S UTC'
    assert environment.FMT_MOMENT_DEFAULT == 'DD. MMM YYYY HH:mm:ss'
    assert environment.FMT_MOMENT_MSECOND == 'DD. MMM YYYY HH:mm:SS'
    assert environment.FMT_MOMENT_SECOND == 'DD. MMM YYYY HH:mm:ss'
    assert environment.FMT_MOMENT_MINUTE == 'DD. MMM YYYY HH:mm:ss'
    assert environment.FMT_MOMENT_HOUR == 'DD. MMM YYYY HH:mm'
    assert environment.FMT_MOMENT_DAY == 'DD. MMM YYYY HH:mm'
    assert environment.FMT_MOMENT_WEEK == 'DD. MMM YYYY'
    assert environment.FMT_MOMENT_MONTH == 'DD. MMM YYYY'
    assert environment.FMT_MOMENT_QUARTER == 'MMM YYYY'
    assert environment.FMT_MOMENT_YEAR == 'MMM YYYY'

    monkeypatch.setenv('FMT_STRFTIME', '‚è∞')
    monkeypatch.setenv('FMT_MOMENT_DEFAULT', '‚è±')
    monkeypatch.setenv('FMT_MOMENT_MSECOND', '‚è± msecond')
    monkeypatch.setenv('FMT_MOMENT_SECOND', '‚è± second')
    monkeypatch.setenv('FMT_MOMENT_MINUTE', '‚è± minute')
    monkeypatch.setenv('FMT_MOMENT_HOUR', '‚è± hour')
    monkeypatch.setenv('FMT_MOMENT_DAY', '‚è± day')
    monkeypatch.setenv('FMT_MOMENT_WEEK', '‚è± week')
    monkeypatch.setenv('FMT_MOMENT_MONTH', '‚è± month')
    monkeypatch.setenv('FMT_MOMENT_QUARTER', '‚è± quarter')
    monkeypatch.setenv('FMT_MOMENT_YEAR', '‚è± year')
    reload(environment)

    assert environment.FMT_STRFTIME == '‚è∞'
    assert environment.FMT_MOMENT_DEFAULT == '‚è±'
    assert environment.FMT_MOMENT_MSECOND == '‚è± msecond'
    assert environment.FMT_MOMENT_SECOND == '‚è± second'
    assert environment.FMT_MOMENT_MINUTE == '‚è± minute'
    assert environment.FMT_MOMENT_HOUR == '‚è± hour'
    assert environment.FMT_MOMENT_DAY == '‚è± day'
    assert environment.FMT_MOMENT_WEEK == '‚è± week'
    assert environment.FMT_MOMENT_MONTH == '‚è± month'
    assert environment.FMT_MOMENT_QUARTER == '‚è± quarter'
    assert environment.FMT_MOMENT_YEAR == '‚è± year'


def test_api_plot_refresh_ms(monkeypatch):
    assert environment.API_PLOT_REFRESH_MS == 1500

    monkeypatch.setenv('API_PLOT_REFRESH_MS', '23')
    reload(environment)

    assert environment.API_PLOT_REFRESH_MS == 23


def test_taglines(monkeypatch):
    for num, line in enumerate(environment.TAGLINES):
        assert environment.TAGLINES[num] == line

        monkeypatch.setenv(f'TAGLINE_{1 + num:02d}', '*Ô∏è‚É£')
        reload(environment)

        assert environment.TAGLINES[num] == '*Ô∏è‚É£'


def test_icons(monkeypatch):
    def _check(elems, expect=None):
        for key, val in elems.items():
            value = expect if expect is not None else val
            assert value
            assert isinstance(value, str)
            assert elems[key] == value

    _check(environment.ICON)

    for key in environment.ICON:
        monkeypatch.setenv(f'ICON_{key.upper()}', 'üå≠')
    reload(environment)

    _check(environment.ICON, 'üå≠')
